---
alwaysApply: true
---

# CloudBase AI Toolkit 项目规范

## 项目统一约束 ⚠️

### 代码规范（强制要求）

- **所有代码注释必须使用英文，禁止使用中文注释**
- **代码中的变量名、函数名、类名等标识符应使用英文**
- 代码中的字符串内容可以使用中文（如用户界面文本、错误信息等）

### 提交规范（强制要求）

- **Git commit 信息必须使用英文，采用 conventional-changelog 风格**
- **Commit 信息格式：** `type(scope): description`，例如 `feat(auth): add user authentication system`
- **在 feat(xxx): 后面可以添加 emoji 字符**
- **禁止在 commit 信息中使用中文**

### 项目结构

- `tests` 自动化测试
- `specs` 存放核心的迭代过程中沉淀的 spec

---

# 自定义斜杠命令

## 命令列表

### `/list_commands`

**功能：** 列出所有可用的斜杠命令
**触发条件：** 当用户输入 `/list_commands` 时
**行为：** 显示所有可用的命令及其功能描述

### `/new_feature`

**功能：** 新功能开发工作流
**触发条件：** 当用户输入 `/new_feature` 或提出新需求时
**行为：** 采用标准软件工程方式独立开展工作，每个环节完成后都需要用户确认后才可进行下一个环节
**工作流程：**

1. 需求澄清：搞清楚问题和需求，用户确认后进行下一个环节
2. 需求文档设计：按照 EARS 简易需求语法方法描述，保存在 `specs/spec_name/requirements.md`，用户确认后进行下一个环节
3. 技术方案设计：描述技术架构，保存在 `specs/spec_name/design.md`，用户确认后进行下一个环节
4. 任务拆分：细化具体任务，保存在 `specs/spec_name/tasks.md`，用户确认后进行下一个环节
5. 执行任务：独立自主运行，及时更新任务状态

## 需求文档模板

### 需求文档格式

```markdown
# 需求文档

## 介绍

需求描述

## 需求

### 需求 1 - 需求名称

**用户故事：** 用户故事内容

#### 验收标准

1. 采用 ERAS 描述的子句 While <可选前置条件>, when <可选触发器>, the <系统名称> shall <系统响应>，例如 When 选择"静音"时，笔记本电脑应当抑制所有音频输出。
2. ...
```

### 任务计划格式

```markdown
# 实施计划

- [ ] 1. 任务信息
  - 具体要做的事情
  - ...
  - \_需求: 相关的需求点的编号
```
